variables:
  IMAGE_NAME: "badman02/currencyweb"
  K8S_CONTEXT: "e2591/currencyweb:test-agent-eks"
  SVC_NAME: "currencyweb"
  K8S_DEV_NS: "dev"
  K8S_PRD_NS: "prod"

stages:
  - build
  - deploy
  - rollback_prod

buildDev:
  stage: build
  image: docker:19.03.12
  services:
    - docker:19.03.12-dind
  except:
    - tags
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
  script:
    - echo "Building for address - ${API_ADDRESS_DEV}"
    - docker build --build-arg API_ADDRESS=${API_ADDRESS_DEV} -t ${IMAGE_NAME}:develop .
    - docker push ${IMAGE_NAME}:develop

build-and-deploy:
  stage: build
  image: docker:19.03.12
  services:
    - docker:19.03.12-dind
  only:
    - tags
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
  script:
    - echo "Building for address - ${API_ADDRESS_PROD}"
    - docker build --build-arg API_ADDRESS=${API_ADDRESS_PROD} -t ${IMAGE_NAME}:${CI_COMMIT_TAG} .
    - docker push ${IMAGE_NAME}:${CI_COMMIT_TAG}


 # Deploy in k8s
.deploy: &k8s_deploy_template
  stage: deploy
  allow_failure: false
  image:
    name: alpine/helm:3.7.2
    entrypoint: [""]
  script:
    - helm upgrade ${RELEASE_NAME} --install ./.helm
      --kube-context "${K8S_CONTEXT}"
      --namespace "${K8S_NAMESPACE}"
      --set "app.apiAddress=${API_ADDRESS}"
      --set "commitSha=$CI_COMMIT_SHA"
      --set "image.tag=${TAG}"
      --wait

DeployPROD:k8s:
  <<: *k8s_deploy_template
  environment:
    name: Production
  only:
    - tags
  when: manual
  variables:
    RELEASE_NAME: ${SVC_NAME}-prod
    K8S_NAMESPACE: ${K8S_PRD_NS}
    API_ADDRESS: ${API_ADDRESS_PROD}
    TAG: ${CI_COMMIT_TAG}

DeployDEV:k8s:
  <<: *k8s_deploy_template
  environment:
    name: Development
  except:
    - tags
  variables:
    RELEASE_NAME: ${SVC_NAME}-dev
    K8S_NAMESPACE: ${K8S_DEV_NS}
    API_ADDRESS: ${API_ADDRESS_DEV}
    TAG: "develop"


 # Rollback if failed, manual
RollbackProd:
  stage: rollback_prod
  when: manual
  only:
    - tags
  script:
    - helm rollback ${RELEASE_NAME} 0
      --force
      --kube-context ${K8S_CONTEXT}
      --namespace ${K8S_PRD_NS}
  variables:
    RELEASE_NAME: ${SVC_NAME}-prod
